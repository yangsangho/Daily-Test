apply plugin: 'com.android.application'

apply plugin: 'com.google.gms.google-services'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.2"
    defaultConfig {
        applicationId "kr.yangbob.memorization"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 4
        versionName "1.0.3"
        testInstrumentationRunner "kr.yangbob.memorization.test.FakeRunner"
    }
    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            testCoverageEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            resValue "string", "ad_mob_unit_for_test", "ca-app-pub-9569532653801871/5427342808"
            resValue "string", "ad_mob_unit_for_create", "ca-app-pub-9569532653801871/2020442658"
            resValue "string", "ad_mob_unit_for_result", "ca-app-pub-9569532653801871/9898932679"
            resValue "string", "ad_mob_unit_for_entire", "ca-app-pub-9569532653801871/6468676321"
        }
        debug {
            debuggable true
            testCoverageEnabled true
            resValue "string", "ad_mob_unit_for_test", "ca-app-pub-3940256099942544/6300978111"
            resValue "string", "ad_mob_unit_for_create", "ca-app-pub-3940256099942544/6300978111"
            resValue "string", "ad_mob_unit_for_result", "ca-app-pub-3940256099942544/6300978111"
            resValue "string", "ad_mob_unit_for_entire", "ca-app-pub-3940256099942544/6300978111"
        }
    }
    testOptions {
        unitTests.includeAndroidResources = true
        animationsDisabled = true
    }
    dataBinding {
        enabled = true
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'

    // android ktx
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.core:core-ktx:1.2.0'

    // ui
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'com.google.android.material:material:1.1.0'
    implementation "androidx.viewpager2:viewpager2:1.0.0"

    // Room
    def room_version = "2.2.4"
    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    kapt "androidx.room:room-compiler:$room_version"

    // LiveCycle(ViewModel and LiveDat)
    def lifecycle_version = "2.2.0"
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"
    kapt "androidx.lifecycle:lifecycle-compiler:$lifecycle_version"

    // koin
    def koin_version = "2.0.1"
    implementation "org.koin:koin-android:$koin_version"
    implementation "org.koin:koin-androidx-scope:$koin_version"
    implementation "org.koin:koin-test:$koin_version"
    implementation "org.koin:koin-androidx-viewmodel:$koin_version"

    // firebase
    implementation 'com.google.firebase:firebase-analytics:17.3.0'
    implementation 'com.google.firebase:firebase-ads:19.0.1'
    implementation 'com.google.android.play:core:1.7.2'

    // test Core
    testImplementation 'junit:junit:4.13'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'

    //hamcrest
    testImplementation 'org.hamcrest:hamcrest:2.2'

    // espresso - 원래 androidTestImplementation 으로 했었는데, FakeRunner 적용하기 위해
    implementation 'androidx.test:runner:1.2.0'
    implementation 'androidx.test:rules:1.2.0'

    //espresso
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.2.0'

    // mockito
    testImplementation 'org.mockito:mockito-inline:2.21.0'
    androidTestImplementation 'org.mockito:mockito-android:2.21.0'

    // Robolectric
    testImplementation 'androidx.test:core:1.2.0'
    testImplementation 'androidx.test.ext:junit:1.1.1'
    testImplementation "org.robolectric:robolectric:4.3.1"
}

apply plugin: 'jacoco'

jacoco {
    toolVersion = '0.8.5'
    reportsDir = file("${buildDir}/reports")
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

    reports {
        xml.enabled = false
        html.enabled = true
    }

    def excludes = [
            '**/R.class',
            '**/R$*.class',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            'android/**/*.*',
            '**/treemanager/component/**',
            '**/treemanager/tree/*.*',
            '**/activity/**'
    ]

    classDirectories.from = fileTree(
            dir: "$buildDir/intermediates/javac/debug/compileDebugJavaWithJavac/classes",
            excludes: excludes
    ) + fileTree(
            dir: "$buildDir/tmp/kotlin-classes/debug",
            excludes: excludes
    )

    sourceDirectories.from = files([
            android.sourceSets.main.java.srcDirs,
            "src/main/kotlin"
    ])

    executionData.from = fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec', 'outputs/code_coverage/debugAndroidTest/connected/**/*.ec'
    ])
}